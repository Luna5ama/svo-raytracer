#version 430 core
layout(binding = 0, rgba8) uniform image2D framebufferImage;
layout(location = 0) uniform vec3 cam[5] = {
  vec3(0.0, 2.0, 40.0), // <- position
  vec3(-1.0, -1.0, -1.0), vec3(-1.0, 1.0, -1.0), // <- left corner directions
  vec3(1.0, -1.0, -1.0), vec3(1.0, 1.0, -1.0) // <- right corner directions
};
layout(location = 5) uniform int frameNumber;
uniform isamplerBuffer bufferTex;
layout(std430, binding = 7) buffer shaderStorage{
  uint[] octreeBuffer;
};
layout(location = 8) uniform vec3 camPos;
layout(location = 9) uniform int bufferEnd;
int endOffset = bufferEnd / 4 + 1;

struct sphere{
    float radius;
    vec3 pos, color, emi;
};
float rand(vec2 co){
    return (fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453));
}
uint wang_hash(uint seed)
{
    seed = (seed ^ uint(61)) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}
#define EPSILON 3.552713678800501e-15f
#define PI 3.14159265359f
#define SAMPLES 1
#define NODE_SIZE 6
#define LEAF_SIZE 1
#define MAX_SCALE 23 //IDK WHY BUT THIS HAS TO BE 23 OR ELSE EVERYTHING BREAKS
#define MAX_DEPTH 11
#define MAX_RAYCAST_ITERATIONS 1000
#define RENDER_SCALE 2

struct hitinfo {
  float near;
  int i;
  vec3 normal;
  vec3 hitpos;
};
struct Ray {
    vec3 origin;
    vec3 dir;
};

struct Material{
  vec3 color;
  vec3 emission;
  float roughness;
};

const Material materials[8] = {
  {{0.8f, 0.8f, 0.0f}, {0.8f, 0.8f, 0.0f}, 0.3f},
  {{1.0f, 0.9f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.3f},
  {{0.8f, 0.3f, 0.0f}, {0.4f, 0.15f, 0.0f}, 0.3f},
  {{1.0f, 0.7f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.3f},
  {{1.0f, 0.6f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.3f},
  {{1.0f, 0.5f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.3f},
  {{1.0f, 0.4f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.3f},
  {{1.0f, 0.3f, 0.2f}, {0.2f, 0.2f, 0.2f}, 0.3f}
};

vec3 debugColor = vec3(1, 1, 1);

int getByte(uint bytePointer){
  uint r = bytePointer % 4;
  uint i = bytePointer / 4;
  return int((octreeBuffer[i] & (0x000000ff << (r*8u))) >> (r*8u));
}

struct Node{
    int value;
    int cp;
    int leafMask;     
};

Node extractNode(uint nodePointer){
  Node ret = {
    getByte(nodePointer++),
    (getByte(nodePointer++) << 24) + (getByte(nodePointer++) << 16) + (getByte(nodePointer++) << 8) + getByte(nodePointer++),
    getByte(nodePointer++)
  };
  return ret;
}

Node extractLeaf(uint nodePointer){
  Node ret = {getByte(nodePointer), 0, 0};
  return ret;
}

Node extractChild(uint childPointer, uint child, int leafMask){
  int i = 0;
  uint pointer = childPointer;
  while(i < child){
    if((leafMask & (0x00000001 << i)) == (0x00000001 << i)){ 
      //debugFlag = true;
      pointer += LEAF_SIZE;
    }else{
      pointer += NODE_SIZE;
    }
    i++;
  }
  if((leafMask & (0x00000001 << child)) == (0x00000001 << child)){
    return extractLeaf(pointer);
  }else{
    return extractNode(pointer);
  }
}

struct retInfo{
  vec2 hit;
  vec3 normal;
};


  /*
  NODE STRUCTURE
  branch
  0 :: value - 1 byte
  1 :: child pointer - 4 bytes
  2 ::
  3 ::
  4 ::
  5 :: leaf mask

  leaf
  0 :: value - 1 byte
  */
  
struct castResult {
  uint value;
  float t;
  vec3 hitPos;
  uint scale;
  vec3 debugColor;
  vec3 normal;
};

struct stackEntry {
    Node node;
    float tmax;
} octstack[MAX_SCALE + 1];

int stack_ptr = 0;
void stack_reset() {stack_ptr = 0;}
void stack_push(in stackEntry s) {octstack[stack_ptr++] = s;}
stackEntry stack_pop() {return octstack[--stack_ptr];}
bool stack_empty() {return stack_ptr == 0;}


bool intersectOctree(vec3 origin, vec3 dir, vec3 invdir, out castResult res, int maxDepth){

  res.debugColor = vec3(0.3, 0.3, 0.6);
  //set origin to nearest intersection with octree
  float eps = pow(2, -MAX_SCALE);
  // box bbox = {vec3(1.0f), vec3(2.0f), vec3(0.0f), vec3(0.0f)};
  // retInfo lambda = intersectBox(origin, invdir, bbox);
  // if(lambda.hit.y >= 0 && lambda.hit.x < lambda.hit.y && lambda.hit.x > 0){
  //   origin += lambda.hit.x * dir;
  // }
  stack_reset();
  Node parent = extractNode(0);

  int iter = 0;

  if(abs(dir.x) < eps) dir.x = eps * sign(dir.x);
  if(abs(dir.y) < eps) dir.y = eps * sign(dir.y);
  if(abs(dir.z) < eps) dir.z = eps * sign(dir.z);
  
  float tx_coef = 1.0f / -abs(dir.x);
  float ty_coef = 1.0f / -abs(dir.y);
  float tz_coef = 1.0f / -abs(dir.z);

  float tx_bias = tx_coef * origin.x;
  float ty_bias = ty_coef * origin.y;
  float tz_bias = tz_coef * origin.z;

  uint octant_mask = 0; 
  if(dir.x > 0.0f) octant_mask ^= 1u, tx_bias = 3.0f * tx_coef - tx_bias;
  if(dir.y > 0.0f) octant_mask ^= 2u, ty_bias = 3.0f * ty_coef - ty_bias;
  if(dir.z > 0.0f) octant_mask ^= 4u, tz_bias = 3.0f * tz_coef - tz_bias;

  float t_min = max(max(2.0f * tx_coef - tx_bias, 2.0f * ty_coef - ty_bias), 2.0f * tz_coef - tz_bias);
  float t_max = min(min(tx_coef - tx_bias, ty_coef - ty_bias), tz_coef - tz_bias);
  t_min = max(t_min, 0.0f);
  //t_max = min(t_max, 1.0f);
  float h = t_max;

  uint idx = 0;
  vec3 pos = vec3(1.0f, 1.0f, 1.0f);
  int scale = MAX_SCALE - 1;
  float scale_exp2 = 0.5f;
  int child_descriptor = 0;

  if(1.5f * tx_coef - tx_bias > t_min) idx ^= 1u, pos.x = 1.5f;
  if(1.5f * ty_coef - ty_bias > t_min) idx ^= 2u, pos.y = 1.5f;
  if(1.5f * tz_coef - tz_bias > t_min) idx ^= 4u, pos.z = 1.5f;
  //res.hit = true;
  int val = 0;
  uint child_shift = 0;

  while(scale < MAX_SCALE){
    iter++;
    if(iter > MAX_RAYCAST_ITERATIONS){
      return false;
    }
    if(child_descriptor == 0){
      child_descriptor = parent.cp;
    }
    float tx_corner = pos.x * tx_coef - tx_bias;
    float ty_corner = pos.y * ty_coef - ty_bias;
    float tz_corner = pos.z * tz_coef - tz_bias;
    float tc_max = min(min(tx_corner, ty_corner), tz_corner);

    child_shift = idx ^ octant_mask;

    // if(endOffset < (bufferEnd/4) + 250){
    //   octreeBuffer[endOffset++] = child_descriptor;
    // }

    // if(child_descriptor < 0) debugFlag = true;

    Node child = extractChild(child_descriptor, child_shift, parent.leafMask);
    if(child.value != 0 && t_min <= t_max){ //check if voxel exists
      // if(child.cp == 0 && child.value != 0){
      //   res.hit = true;
      //   break;
      // }
      if(MAX_SCALE - scale == maxDepth){
        break;
      }

      float tv_max = min(t_max, tc_max);
      float one_half = scale_exp2 * 0.5f;
      float tx_center = one_half * tx_coef + tx_corner;
      float ty_center = one_half * ty_coef + ty_corner;
      float tz_center = one_half * tz_coef + tz_corner;

      if(t_min <= tv_max){
        if(child.cp == 0){ //if voxel is a leaf
          break;
        }

        //PUSH
        if(tc_max < h){
          stackEntry se = {parent, t_max}; 
          octstack[scale] = se;
        }
        h = tc_max;

        parent = child; //??????????

        idx = 0u;
        --scale;
        scale_exp2 = one_half;

        if(tx_center > t_min) idx ^= 1u, pos.x += scale_exp2;
        if(ty_center > t_min) idx ^= 2u, pos.y += scale_exp2;
        if(tz_center > t_min) idx ^= 4u, pos.z += scale_exp2;

        t_max = tv_max;
        child_descriptor = 0;
        continue;
      }
    }
    //ADVANCE
    uint step_mask = 0u;
    if(tx_corner <= tc_max) step_mask ^= 1u, pos.x -= scale_exp2;
    if(ty_corner <= tc_max) step_mask ^= 2u, pos.y -= scale_exp2;
    if(tz_corner <= tc_max) step_mask ^= 4u, pos.z -= scale_exp2;

    t_min = tc_max;
    idx ^= step_mask;

    //POP
    if((idx & step_mask) != 0){
      uint differing_bits = 0;
      if((step_mask & 1u) != 0) differing_bits |= floatBitsToUint(pos.x) ^ floatBitsToUint(pos.x + scale_exp2);
      if((step_mask & 2u) != 0) differing_bits |= floatBitsToUint(pos.y) ^ floatBitsToUint(pos.y + scale_exp2);
      if((step_mask & 4u) != 0) differing_bits |= floatBitsToUint(pos.z) ^ floatBitsToUint(pos.z + scale_exp2);
      scale = findMSB(differing_bits);
      scale_exp2 = uintBitsToFloat((scale - MAX_SCALE + 127u) << 23u);

      stackEntry se = octstack[scale];
      parent = se.node;
      t_max = se.tmax;

      uint shx = floatBitsToUint(pos.x) >> scale;
      uint shy = floatBitsToUint(pos.y) >> scale;
      uint shz = floatBitsToUint(pos.z) >> scale;
      pos.x = uintBitsToFloat(shx << scale);
      pos.y = uintBitsToFloat(shy << scale);
      pos.z = uintBitsToFloat(shz << scale);
      idx = (shx & 1u) | ((shy & 1u) << 1u) | ((shz & 1u) << 2u);
      h = 0.0f;
      child_descriptor = 0;
    }
  }

  if(scale >= MAX_SCALE){
    //t_min = 2.0f;
    //res.hit = false;
    //res.debugColor = vec3(0, 0, 0);
    res.debugColor = vec3(0.005) * iter;
    return false;
  }

  float tx_corner = tx_coef * (pos.x + scale_exp2) - tx_bias;
  float ty_corner = ty_coef * (pos.y + scale_exp2) - ty_bias;
  float tz_corner = tz_coef * (pos.z + scale_exp2) - tz_bias;
  vec3 norm = (tx_corner > ty_corner && tx_corner > tz_corner)
    ? vec3(-1, 0, 0)
    : (ty_corner > tz_corner ? vec3(0, -1, 0) : vec3(0, 0, -1));
  
  norm.x *= 1 - int((octant_mask & 1u) == 0u) * 2;
  norm.y *= 1 - int((octant_mask & 2u) == 0u) * 2;
  norm.z *= 1 - int((octant_mask & 4u) == 0u) * 2;
  //if((octant_mask & 1u) == 0u) norm.x = -norm.x;
  //if((octant_mask & 2u) == 0u) norm.y = -norm.y;
  //if((octant_mask & 4u) == 0u) norm.z = -norm.z;

  res.t = t_min;
  res.value = extractChild(child_descriptor, child_shift, parent.leafMask).value;
  res.normal = norm;
  res.scale = scale;
  //res.hitPos = hitpos;
  //res.hit = true;
  res.debugColor = vec3(0.005) * iter;
  //res.debugColor = vec3(0.01 * iter, 1 - 0.01 * scale, 0.0);

  return scale < MAX_SCALE && t_min <= t_max;
}


vec3 trace(vec3 origin, vec3 dir, float seed0, float seed1){
  castResult res;
  res.t = 2.0f;
  vec3 accum_color = vec3(0.0f, 0.0f, 0.0f);
  vec3 mask = vec3(1.0f, 1.0f, 1.0f);

  // for(int i=0; i < 2; i++){
  //   if(!intersectOctree(origin, dir, 1.0/dir, res, MAX_DEPTH)) break;
  //   vec3 hitpoint = origin + dir * res.t;
  //   vec3 normal = res.normal;
  //   if(dot(normal, dir) > 0){
  //     normal = -normal;
  //   }
  //   vec3 normal_facing = dot(normal, dir) < 0.0f ? normal : normal * (-1.0f);

  //   float rand1 = 2.0f * PI * rand(vec2(seed0, seed1));
  //   float rand2 = rand(vec2(seed0 + 1, seed1 + 1));
  //   //float rand1 = 2.0f * PI;
  //   //float rand2 = 1.0f;
  //   //float rand2s = sqrt(rand2);
    
  //   vec3 w = normal_facing;
  //   vec3 axis = abs(w.x) > 0.1f ? vec3(0.0f, 1.0f, 0.0f) : vec3(1.0f, 0.0f, 0.0f);
  //   vec3 u = normalize(cross(axis, w));
  //   vec3 v = cross(w, u);
  //   vec3 newdir = normalize(u*cos(rand1)*rand2 + v*sin(rand1)*rand2 + w*sqrt(1.0f - rand2));

  //   origin = hitpoint;
  //   dir = newdir;

  //   Material mat;
  //   if(res.value == 1){
  //     mat = materials[1];
  //   }else if(res.value == 0){
  //     mat = materials[0];
  //   }else{
  //     mat = materials[2];
  //   }
  //   accum_color += mask * mat.emission;
  //   mask *= mat.color;
  //   mask *= dot(newdir, normal_facing);
  // }
  // return accum_color;
  if(intersectOctree(origin, dir, 1.0/dir, res, MAX_DEPTH)){
    return res.debugColor;
    //return materials[res.node.value].color;
  }else{
    return res.debugColor;
    //return vec3(0);
  }
}

layout(local_size_x = 8, local_size_y = 8) in;
void main(void) {
  ivec2 px = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebufferImage);
  if (any(greaterThanEqual(px, size)))
    return;
  vec2 p = (vec2(px) + vec2(0.5)) / vec2(size);
  //vec2 p = (vec2(px) / vec2(size));
  vec3 dir = mix(mix(cam[1], cam[2], p.y), mix(cam[3], cam[4], p.y), p.x);
  
  
  vec3 finalcolor = vec3(0.0f, 0.0f, 0.0f);
  int samples = SAMPLES;
  float invsamples = 1.0f / SAMPLES;
  //for(int i = 0; i < SAMPLES; i++){
  //if(px.x % RENDER_SCALE == 0 && px.y % RENDER_SCALE == 0){
    int i = frameNumber;
    finalcolor += trace(camPos, normalize(dir), 
        px.x + rand(vec2(i, i)) + rand(vec2(i+1, i+1)), 
        px.y + rand(vec2(i, i)) + rand(vec2(i+1, i+1)));
  //}
  // }else{
  //   ivec2 grab = ivec2(px.x - (px.x % RENDER_SCALE), px.y - (px.y % RENDER_SCALE));
  //   finalcolor = imageLoad(framebufferImage, grab).xyz;
  // }
  vec3 tempColor = finalcolor;

  //Node debugNode = extractNode(407);
  //if(debugFlag) debugColor = vec3(0, 1, 0);
  if(px.x < 10 && px.y < 10) finalcolor = debugColor;
  //if(px.x % 8 == 0 && px.y % 8 == 0) finalcolor = debugColor;
  
  if(frameNumber > 1){
    vec3 lastcolor = imageLoad(framebufferImage, px).xyz;
    finalcolor = (frameNumber * lastcolor + finalcolor) / (frameNumber + 1);
  }
  imageStore(framebufferImage, px, (vec4(finalcolor, 1.0)));
}